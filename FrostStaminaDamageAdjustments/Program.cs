using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace FrostStaminaDamageAdjustments;

public class Program
{
    private static Lazy<Settings> _settings = null!;
    private static Settings Settings => _settings.Value;
    
    public static async Task<int> Main(string[] args)
    {
        return await SynthesisPipeline.Instance
            .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
            .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
            .Run(args);
    }

    private static IPatcherState<ISkyrimMod, ISkyrimModGetter>? _state;
    internal static IPatcherState<ISkyrimMod, ISkyrimModGetter> State => _state!;

    private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
    {
        _state = state;
        var blacklistedIDs = string.Join(",", Settings.Blacklist).Split(",").ToList();
        foreach (var magicEffectGetter in state.LoadOrder.PriorityOrder.MagicEffect().WinningContextOverrides())
        {
            var magicEffect = magicEffectGetter.Record;
            if (magicEffect.SecondActorValue == ActorValue.Stamina && magicEffect.Flags.ToString().Contains("Detrimental"))
            {
                var contexts = state.LinkCache.ResolveAllContexts<IMagicEffect, IMagicEffectGetter>(magicEffect.FormKey).ToList();
                var originalMod = contexts[^1].ModKey;
                if (ShouldSkip(originalMod, magicEffect, blacklistedIDs))
                {
                    Console.WriteLine("Skipping " + magicEffect.EditorID + " from mod " + originalMod);
                    continue;
                }

                IMagicEffect modifiedEffect = magicEffectGetter.GetOrAddAsOverride(state.PatchMod);
                var originalDamage = modifiedEffect.SecondActorValueWeight;
                if (originalDamage <= 0)
                    continue;
                    
                var newDamage = (float)(originalDamage * Settings.DamageMultiplier);
                modifiedEffect.SecondActorValueWeight = newDamage;
                Console.WriteLine($"Magic Effect: {magicEffect.EditorID} Stamina Damage changed from {originalDamage} to {newDamage}");
            }
        }
    }

    private static bool ShouldSkip(ModKey originalMod, IMajorRecordGetter magicEffect, IEnumerable<string> blacklistedIDs)
        => Settings.IgnoredMods.Contains(originalMod)
            || magicEffect.EditorID == null
            || blacklistedIDs.Any(magicEffect.EditorID.HasValueAndContainsId);
}